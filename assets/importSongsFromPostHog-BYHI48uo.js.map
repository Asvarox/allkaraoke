{"version":3,"file":"importSongsFromPostHog-BYHI48uo.js","names":["Song","SongPreview","convertTxtToSong","getSongId","API_URL","PROJECT_ID","AFTER_DATE","Date","now","toISOString","suffixes","normalizeSong","song","forEach","suffix","title","toLowerCase","endsWith","slice","length","trim","language","map","lang","startsWith","lastUpdate","id","undefined","RequestOptions","body","method","headers","HeadersInit","RequestFunc","url","options","Promise","importSongsFromPostHogBase","mkRequest","currentSongs","fetchedSongIds","onSongAdded","createdAt","onSongRemoved","songId","from","sharedSongs","JSON","stringify","query","kind","songsAdded","songTxt","results","Array","includes","console","log","replaceAll","tracks","sections","find","currentSong","video","push","e","warn","Song","SongsService","storage","importSongsFromPostHogBase","importSongsFromPostHog","posthogKey","session","getItem","prompt","setItem","defaultFrom","Date","setDate","getDate","from","local","toISOString","makeRequest","url","options","RequestInit","response","fetch","headers","Authorization","ok","Error","status","json","lastSongAdd","getTime","getIndex","filter","song","createdAt","store","createdAtTime","songId","deleteSong"],"sources":["../../src/modules/Songs/utils/importSongsFromPostHogBase.ts","../../src/modules/Songs/utils/importSongsFromPostHog.ts"],"sourcesContent":["import { Song, SongPreview } from 'interfaces';\nimport convertTxtToSong from './convertTxtToSong';\nimport getSongId from './getSongId';\n\nconst API_URL = 'https://eu.posthog.com';\nconst PROJECT_ID = '281';\nconst AFTER_DATE = new Date(Date.now() - 1000 * 3600 * 24 * 28).toISOString();\n\nconst suffixes = ['(tv)', '(album version)', '(movie version)', '[duet]'];\n\nconst normalizeSong = (song: Song): Song => {\n  suffixes.forEach((suffix) => {\n    if (song.title.toLowerCase().endsWith(suffix)) {\n      song.title = song.title.slice(0, -suffix.length);\n    }\n  });\n  song.title = song.title.trim();\n\n  song.language = song.language.map((lang) => {\n    if (lang.toLowerCase().startsWith('espa')) {\n      return 'Spanish';\n    } else if (lang.toLowerCase().endsWith('(romanized)')) {\n      return lang.slice(0, -11).trim();\n    } else if (lang.toLowerCase().endsWith('(brazil)')) {\n      return 'Portuguese';\n    }\n    return lang;\n  });\n\n  song.lastUpdate = new Date().toISOString();\n\n  // @ts-expect-error reset id before generating a new one\n  song.id = undefined;\n  song.id = getSongId(song);\n\n  return song;\n};\n\ntype RequestOptions = {\n  body?: string;\n  method: 'post' | 'get';\n  headers?: HeadersInit;\n};\n\ntype RequestFunc = (url: string, options: RequestOptions) => Promise<any>;\n\nexport const importSongsFromPostHogBase = async (\n  mkRequest: RequestFunc,\n  currentSongs: SongPreview[],\n  fetchedSongIds: string[],\n  onSongAdded: (song: Song, createdAt: string) => Promise<void>,\n  onSongRemoved: (songId: string) => Promise<void>,\n  from?: string,\n) => {\n  const sharedSongs = await mkRequest(`${API_URL}/api/projects/${PROJECT_ID}/query`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: {\n        kind: 'HogQLQuery',\n        query: `\n            select events.properties.song, events.properties.songId, events.created_at\n            from events\n            where events.created_at > toDateTime('${from ?? AFTER_DATE}')\n              and event IN ('share-song', 'unshare-song') and events.properties.$user_id !='3ab0feed-e1d2-4ff0-8780-5db00698eb60'\n            ORDER BY events.created_at ASC\n            LIMIT 300\n        `,\n      },\n    }),\n  });\n\n  const songsAdded: string[] = [];\n\n  for (const [songTxt, songId, createdAt] of sharedSongs.results as Array<[string, string, string]>) {\n    try {\n      if (!songTxt && songId && songsAdded.includes(songId)) {\n        await onSongRemoved(songId);\n        console.log(`Deleting song ${songId}`);\n      }\n\n      const song = convertTxtToSong(songTxt.replaceAll('\\\\n', '\\n').replaceAll('\\\\\"', '\"'));\n      if (!song.id) {\n        console.log('Song has no ID', song);\n        return;\n      }\n      normalizeSong(song);\n\n      if (fetchedSongIds.includes(song.id)) {\n        console.log(`Song ${song.id} already fetched`);\n      } else if ((song.tracks[0]?.sections.length ?? 0) < 5) {\n        console.log(`Song ${song.id} seems to be broken, ${song.tracks[0]?.sections.length} sections found`);\n      } else if (currentSongs.find((currentSong) => currentSong.id === song.id)) {\n        console.log(`Song ${song.id} already exists (by song id)`);\n      } else if (currentSongs.find((currentSong) => currentSong.video === song.video)) {\n        console.log(`Song ${song.id} already exists (by video id)`);\n      } else {\n        song.lastUpdate = new Date().toISOString();\n        songsAdded.push(song.id);\n        await onSongAdded(song, createdAt);\n        console.log(`Added song ${song.id}`);\n      }\n    } catch (e) {\n      console.warn(`Couldn't convert song ${songTxt}`, e);\n    }\n  }\n};\n","import { Song } from 'interfaces';\nimport SongsService from 'modules/Songs/SongsService';\nimport storage from 'modules/utils/storage';\nimport { importSongsFromPostHogBase } from './importSongsFromPostHogBase';\n\nconst importSongsFromPostHog = async () => {\n  const posthogKey = storage.session.getItem('posthog_key') || prompt('Enter PostHog PAT');\n\n  if (!posthogKey) {\n    return;\n  }\n  storage.session.setItem('posthog_key', posthogKey);\n\n  const defaultFrom = new Date();\n  defaultFrom.setDate(defaultFrom.getDate() - 10);\n\n  let from = prompt('Enter from', storage.local.getItem('posthog_from') || defaultFrom.toISOString());\n  if (from === null) {\n    return;\n  }\n  from = new Date(from).toISOString();\n\n  const makeRequest = async (url: string, options: RequestInit) => {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...options.headers,\n        Authorization: `Bearer ${posthogKey}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n\n    return response.json();\n  };\n\n  let lastSongAdd: number = storage.local.getItem('posthog_from')\n    ? new Date(storage.local.getItem('posthog_from')!).getTime()\n    : 0;\n\n  await importSongsFromPostHogBase(\n    makeRequest,\n    (await SongsService.getIndex(true)).filter((song) => !song.local),\n    [],\n    async (song: Song, createdAt) => {\n      await SongsService.store(song, false);\n      const createdAtTime = new Date(createdAt).getTime();\n      if (createdAtTime > lastSongAdd) {\n        lastSongAdd = createdAtTime;\n      }\n    },\n    async (songId: string) => {\n      return SongsService.deleteSong(songId);\n    },\n    from,\n  );\n  storage.local.setItem('posthog_from', new Date(lastSongAdd).toISOString());\n};\n\nexport default importSongsFromPostHog;\n"],"mappings":"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"}