{"version":3,"file":"importSongsFromPostHog-nCxBd5YR.js","sources":["../../src/Songs/utils/importSongsFromPostHogBase.ts","../../src/Songs/utils/importSongsFromPostHog.ts"],"sourcesContent":["import { Song, SongPreview } from 'interfaces';\nimport convertTxtToSong from './convertTxtToSong';\nimport getSongId from './getSongId';\n\nconst API_URL = 'https://eu.posthog.com';\nconst PROJECT_ID = '281';\nconst AFTER_DATE = new Date(Date.now() - 1000 * 3600 * 24 * 28).toISOString();\n\nconst suffixes = ['(tv)', '(album version)', '(movie version)', '[duet]'];\n\nconst normalizeSong = (song: Song): Song => {\n  suffixes.forEach((suffix) => {\n    if (song.title.toLowerCase().endsWith(suffix)) {\n      song.title = song.title.slice(0, -suffix.length);\n    }\n  });\n  song.title = song.title.trim();\n\n  song.language = song.language.map((lang) => {\n    if (lang.toLowerCase().startsWith('espa')) {\n      return 'Spanish';\n    } else if (lang.toLowerCase().endsWith('(romanized)')) {\n      return lang.slice(0, -11).trim();\n    } else if (lang.toLowerCase().endsWith('(brazil)')) {\n      return 'Portuguese';\n    }\n    return lang;\n  });\n\n  song.lastUpdate = new Date().toISOString();\n\n  // @ts-ignore\n  song.id = undefined;\n  song.id = getSongId(song);\n\n  return song;\n};\n\ntype RequestFunc = (url: string) => Promise<any>;\n\nexport const importSongsFromPostHogBase = async (\n  mkRequest: RequestFunc,\n  currentSongs: SongPreview[],\n  fetchedSongIds: string[],\n  onSongAdded: (song: Song) => Promise<void>,\n) => {\n  const response = await mkRequest(\n    `${API_URL}/api/projects/${PROJECT_ID}/events?event=share-song&after=${AFTER_DATE}&limit=200`,\n  );\n\n  await Promise.all(\n    response.results.map(async (result: any) => {\n      try {\n        let song = convertTxtToSong(result.properties.song);\n        if (!song.id) {\n          console.log('Song has no ID', song);\n          return;\n        }\n        normalizeSong(song);\n\n        if (fetchedSongIds.includes(song.id)) {\n          console.log(`Song ${song.id} already fetched`);\n        } else if ((song.tracks[0]?.sections.length ?? 0) < 5) {\n          console.log(`Song ${song.id} seems to be broken, ${song.tracks[0]?.sections.length} sections found`);\n        } else if (currentSongs.find((currentSong) => currentSong.id === song.id)) {\n          console.log(`Song ${song.id} already exists`);\n        } else {\n          song.lastUpdate = new Date().toISOString();\n          await onSongAdded(song);\n          console.log(`Added song ${song.id}`);\n        }\n      } catch (e) {\n        console.warn(`Couldn't convert song ${result.properties.song}`);\n      }\n    }),\n  );\n};\n","import SongsService from 'Songs/SongsService';\nimport { Song } from 'interfaces';\nimport { importSongsFromPostHogBase } from './importSongsFromPostHogBase';\n\nconst importSongsFromPostHog = async () => {\n  const posthogKey = sessionStorage.getItem('posthog_key') || prompt('Enter PostHog PAT');\n\n  if (!posthogKey) {\n    return;\n  }\n  sessionStorage.setItem('posthog_key', posthogKey);\n\n  const makeRequest = async (url: string) => {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${posthogKey}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n\n    return response.json();\n  };\n\n  await importSongsFromPostHogBase(makeRequest, await SongsService.getIndex(true), [], async (song: Song) => {\n    return SongsService.store(song);\n  });\n};\n\nexport default importSongsFromPostHog;\n"],"names":["API_URL","PROJECT_ID","AFTER_DATE","Date","now","toISOString","suffixes","normalizeSong","song","forEach","suffix","title","toLowerCase","endsWith","slice","length","trim","language","map","lang","startsWith","lastUpdate","id","undefined","getSongId","importSongsFromPostHogBase","mkRequest","currentSongs","fetchedSongIds","onSongAdded","response","Promise","all","results","result","convertTxtToSong","properties","log","includes","console","tracks","sections","find","currentSong","warn","importSongsFromPostHog","posthogKey","sessionStorage","getItem","prompt","setItem","url","fetch","headers","Authorization","ok","Error","status","json","SongsService","getIndex","store"],"mappings":"sDAIA,MAAMA,EAAU,yBACVC,EAAa,MACbC,EAAa,IAAIC,KAAKA,KAAKC,IAAQ,EAAA,IAAO,KAAO,GAAK,EAAE,EAAEC,YAAY,EAEtEC,EAAW,CAAC,OAAQ,kBAAmB,kBAAmB,QAAQ,EAElEC,EAAiBC,IACrBF,EAASG,QAAoBC,GAAA,CACvBF,EAAKG,MAAMC,YAAcC,EAAAA,SAASH,CAAM,IAC1CF,EAAKG,MAAQH,EAAKG,MAAMG,MAAM,EAAG,CAACJ,EAAOK,MAAM,EACjD,CACD,EACIJ,EAAAA,MAAQH,EAAKG,MAAMK,KAAK,EAE7BR,EAAKS,SAAWT,EAAKS,SAASC,IAAcC,GACtCA,EAAKP,YAAAA,EAAcQ,WAAW,MAAM,EAC/B,UACED,EAAKP,YAAcC,EAAAA,SAAS,aAAa,EAC3CM,EAAKL,MAAM,EAAG,GAAG,EAAEE,OACjBG,EAAKP,YAAcC,EAAAA,SAAS,UAAU,EACxC,aAEFM,CACR,EAEDX,EAAKa,WAAa,IAAIlB,KAAK,EAAEE,YAAY,EAGzCG,EAAKc,GAAKC,OACLD,EAAAA,GAAKE,EAAUhB,CAAI,EAEjBA,GAKIiB,EAA6B,MACxCC,EACAC,EACAC,EACAC,IACG,CACGC,MAAAA,EAAW,MAAMJ,EACpB,GAAE1B,CAAQ,iBAAgBC,CAAW,kCAAiCC,CAAW,YACpF,EAEA,MAAM6B,QAAQC,IACZF,EAASG,QAAQf,IAAI,MAAOgB,GAAgB,SACtC,GAAA,CACF,IAAI1B,EAAO2B,EAAiBD,EAAOE,WAAW5B,IAAI,EAC9C,GAAA,CAACA,EAAKc,GAAI,CACJe,QAAAA,IAAI,iBAAkB7B,CAAI,EAClC,MACF,CACAD,EAAcC,CAAI,EAEdoB,EAAeU,SAAS9B,EAAKc,EAAE,EACjCiB,QAAQF,IAAK,QAAO7B,EAAKc,EAAG,kBAAiB,KACnCd,EAAAA,EAAKgC,OAAO,CAAC,IAAbhC,YAAAA,EAAgBiC,SAAS1B,SAAU,GAAK,EAC1CsB,QAAAA,IAAK,QAAO7B,EAAKc,EAAG,yBAAuBd,EAAAA,EAAKgC,OAAO,CAAC,IAAbhC,YAAAA,EAAgBiC,SAAS1B,MAAO,iBAAgB,EAC1FY,EAAae,KAAMC,GAAgBA,EAAYrB,KAAOd,EAAKc,EAAE,EACtEiB,QAAQF,IAAK,QAAO7B,EAAKc,EAAG,iBAAgB,GAE5Cd,EAAKa,WAAa,IAAIlB,KAAK,EAAEE,YAAY,EACzC,MAAMwB,EAAYrB,CAAI,EACtB+B,QAAQF,IAAK,cAAa7B,EAAKc,EAAG,EAAC,QAE3B,CACViB,QAAQK,KAAM,yBAAwBV,EAAOE,WAAW5B,IAAK,EAAC,CAChE,CACD,CAAA,CACH,CACF,ECxEMqC,EAAyB,SAAY,CACzC,MAAMC,EAAaC,eAAeC,QAAQ,aAAa,GAAKC,OAAO,mBAAmB,EAEtF,GAAI,CAACH,EACH,OAEaI,eAAAA,QAAQ,cAAeJ,CAAU,EAgB1CrB,MAAAA,EAdc,MAAO0B,GAAgB,CACnCrB,MAAAA,EAAW,MAAMsB,MAAMD,EAAK,CAChCE,QAAS,CACPC,cAAgB,UAASR,CAAW,EACtC,CAAA,CACD,EAEG,GAAA,CAAChB,EAASyB,GACZ,MAAM,IAAIC,MAAO,8BAA6B1B,EAAS2B,MAAO,EAAC,EAGjE,OAAO3B,EAAS4B,MAAK,EAGuB,MAAMC,EAAaC,SAAS,EAAI,EAAG,GAAI,MAAOpD,GACnFmD,EAAaE,MAAMrD,CAAI,CAC/B,CACH"}