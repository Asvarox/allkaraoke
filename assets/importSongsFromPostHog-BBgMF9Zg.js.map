{"version":3,"file":"importSongsFromPostHog-BBgMF9Zg.js","sources":["../../src/modules/Songs/utils/importSongsFromPostHogBase.ts","../../src/modules/Songs/utils/importSongsFromPostHog.ts"],"sourcesContent":["import { Song, SongPreview } from 'interfaces';\nimport convertTxtToSong from './convertTxtToSong';\nimport getSongId from './getSongId';\n\nconst API_URL = 'https://eu.posthog.com';\nconst PROJECT_ID = '281';\nconst AFTER_DATE = new Date(Date.now() - 1000 * 3600 * 24 * 28).toISOString();\n\nconst suffixes = ['(tv)', '(album version)', '(movie version)', '[duet]'];\n\nconst normalizeSong = (song: Song): Song => {\n  suffixes.forEach((suffix) => {\n    if (song.title.toLowerCase().endsWith(suffix)) {\n      song.title = song.title.slice(0, -suffix.length);\n    }\n  });\n  song.title = song.title.trim();\n\n  song.language = song.language.map((lang) => {\n    if (lang.toLowerCase().startsWith('espa')) {\n      return 'Spanish';\n    } else if (lang.toLowerCase().endsWith('(romanized)')) {\n      return lang.slice(0, -11).trim();\n    } else if (lang.toLowerCase().endsWith('(brazil)')) {\n      return 'Portuguese';\n    }\n    return lang;\n  });\n\n  song.lastUpdate = new Date().toISOString();\n\n  // @ts-expect-error reset id before generating a new one\n  song.id = undefined;\n  song.id = getSongId(song);\n\n  return song;\n};\n\ntype RequestOptions = {\n  body?: string;\n  method: 'post' | 'get';\n  headers?: HeadersInit;\n};\n\ntype RequestFunc = (url: string, options: RequestOptions) => Promise<any>;\n\nexport const importSongsFromPostHogBase = async (\n  mkRequest: RequestFunc,\n  currentSongs: SongPreview[],\n  fetchedSongIds: string[],\n  onSongAdded: (song: Song) => Promise<void>,\n  onSongRemoved: (songId: string) => Promise<void>,\n  from?: string,\n) => {\n  const sharedSongs = await mkRequest(`${API_URL}/api/projects/${PROJECT_ID}/query`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: {\n        kind: 'HogQLQuery',\n        query: `\n            select events.properties.song, events.properties.songId, events.created_at\n            from events\n            where events.created_at > toDateTime('${from ?? AFTER_DATE}')\n              and event IN ('share-song', 'unshare-song') and events.properties.$user_id !='3ab0feed-e1d2-4ff0-8780-5db00698eb60'\n            ORDER BY events.created_at ASC\n            LIMIT 300\n        `,\n      },\n    }),\n  });\n\n  const songsAdded: string[] = [];\n\n  for (const [songTxt, songId] of sharedSongs.results as Array<[string, string]>) {\n    try {\n      if (!songTxt && songId && songsAdded.includes(songId)) {\n        await onSongRemoved(songId);\n        console.log(`Deleting song ${songId}`);\n      }\n\n      const song = convertTxtToSong(songTxt.replaceAll('\\\\n', '\\n').replaceAll('\\\\\"', '\"'));\n      if (!song.id) {\n        console.log('Song has no ID', song);\n        return;\n      }\n      normalizeSong(song);\n\n      if (fetchedSongIds.includes(song.id)) {\n        console.log(`Song ${song.id} already fetched`);\n      } else if ((song.tracks[0]?.sections.length ?? 0) < 5) {\n        console.log(`Song ${song.id} seems to be broken, ${song.tracks[0]?.sections.length} sections found`);\n      } else if (currentSongs.find((currentSong) => currentSong.id === song.id)) {\n        console.log(`Song ${song.id} already exists (by song id)`);\n      } else if (currentSongs.find((currentSong) => currentSong.video === song.video)) {\n        console.log(`Song ${song.id} already exists (by video id)`);\n      } else {\n        song.lastUpdate = new Date().toISOString();\n        songsAdded.push(song.id);\n        await onSongAdded(song);\n        console.log(`Added song ${song.id}`);\n      }\n    } catch (e) {\n      console.warn(`Couldn't convert song ${songTxt}`, e);\n    }\n  }\n};\n","import { Song } from 'interfaces';\nimport SongsService from 'modules/Songs/SongsService';\nimport storage from 'modules/utils/storage';\nimport { importSongsFromPostHogBase } from './importSongsFromPostHogBase';\n\nconst importSongsFromPostHog = async () => {\n  const posthogKey = storage.session.getItem('posthog_key') || prompt('Enter PostHog PAT');\n\n  if (!posthogKey) {\n    return;\n  }\n  storage.session.setItem('posthog_key', posthogKey);\n\n  const defaultFrom = new Date();\n  defaultFrom.setDate(defaultFrom.getDate() - 10);\n\n  let from = prompt('Enter from', storage.local.getItem('posthog_from') || defaultFrom.toISOString());\n  if (from === null) {\n    return;\n  }\n  from = new Date(from).toISOString();\n\n  storage.local.setItem('posthog_from', new Date().toISOString());\n  const makeRequest = async (url: string, options: RequestInit) => {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...options.headers,\n        Authorization: `Bearer ${posthogKey}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n\n    return response.json();\n  };\n\n  await importSongsFromPostHogBase(\n    makeRequest,\n    await SongsService.getIndex(true),\n    [],\n    async (song: Song) => {\n      return SongsService.store(song);\n    },\n    async (songId: string) => {\n      return SongsService.deleteSong(songId);\n    },\n    from,\n  );\n};\n\nexport default importSongsFromPostHog;\n"],"names":["API_URL","PROJECT_ID","AFTER_DATE","Date","now","toISOString","suffixes","normalizeSong","song","forEach","suffix","title","toLowerCase","endsWith","slice","length","trim","language","map","lang","startsWith","lastUpdate","id","undefined","getSongId","importSongsFromPostHogBase","mkRequest","currentSongs","fetchedSongIds","onSongAdded","onSongRemoved","from","sharedSongs","method","headers","body","JSON","stringify","query","kind","songsAdded","songTxt","songId","results","includes","log","convertTxtToSong","replaceAll","console","tracks","sections","find","currentSong","video","push","e","warn","importSongsFromPostHog","posthogKey","storage","session","getItem","prompt","setItem","defaultFrom","setDate","getDate","local","url","options","response","fetch","Authorization","ok","Error","status","json","SongsService","getIndex","store","deleteSong"],"mappings":"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"}